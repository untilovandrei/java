REST, or REpresentational State Transfer
		-	an architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other.
		-	the implementation of the client and the implementation of the server can be done independently without each knowing about the other.
		-	as long as each side knows what format of messages to send to the other, they can be kept modular and separate
		- 	using a REST interface, different clients hit the same REST endpoints, perform the same actions, and receive the same responses.
		-	Systems that follow the REST paradigm are stateless, meaning that the server does not need to know anything about what state the client
			 is in and vice versa	=> both the server and the client can understand any message received, even without seeing previous messages 

!!! clients send requests to retrieve or modify resources, and servers send responses to these requests


MAKING REQUESTS 
	A request generally consists of:
		- an HTTP verb (Method), which defines what kind of operation to perform
		- a header, which allows the client to pass along information about the request
		- a path to a resource
		- an optional message body containing data




HTTP Methods

	safe method - requests do not change the state of the resource
	idempotent method - multiple identical requests must produce the same result every time until another API has changed the state.



	HTTP GET
		purpose:
			-retrieve resource representation/information only â€“ and not to modify it in any way
		properties:
			-safe 
			-idempotent 
			-Request doesn't have body
			-Successful response has body
			-Cacheable
		response statuses:
			-resouce found = return HTTP response code 200 (OK)
			-resource not found = return HTTP response code 404 (NOT FOUND)
			-request is not correctly formed = return HTTP response code 400 (BAD REQUEST)

	HTTP POST
		purpose:
			-create new subordinate resources
		properties:
			-not safe (creates new resource)
			-not idempotent (identical POST requests result in different resources containing the same information (except resource ids).
			-Request has body
			-Successful response has body
			-not cacheable, unless the response includes "Cache-Control" or "Expires" header fields.
		responses statuses:
			-resource has been created on server = return HTTP response code 201 (Created)
			-the action doesn't result in a resource = return HTTP response code 200 (OK) or 204 (No Content)

	HTTP PUT
		purpose:
			-update/replace existing resource (if the resource does not exist, then API may decide to create a new resource or not)
		properties:
			-not safe (update resource)
			-idempotent
			-not cacheable
			-Request has body
			-Successful response has body
			-not Cacheable
		responses statuses:
			-resource has been created on server  = return HTTP response code 201 (Created)
			-resource has been modified on server = return HTTP response code 200 (OK) or 204 (No Content)

	POST vs PUT 
	POST requests are made on resource collections, whereas PUT requests are made on an individual resource.

	HTTP DELETE
		purpose:
			-delete resources (identified by the Request-URI)
		properties:
			-not safe (deletes resources)
			-idempotent (repeatedly calling DELETE API on that resource will not change the data on server buy will return a 404 (NOT FOUND)
			-Request may have body
			-Successful response may have body
			-not cacheable
		responses statuses:
			-resource deleted and the response includes an entity describing the status = response code 200 (OK)
			-action has been queued = response code 202 (Accepted) 
			-resource deleted but and no further information is to be supplied = response code 204 (No Content)
			
	HTTP PATCH
		purpose:
			-to make partial update/modify on a resource (PUT replaces the resources entity / PATCH modifies resource)
		properties:
			-not safe 
			-not idempotent
			-Request has body
			-Successful response has body
			-not cacheable
		responses statuses:
			-resource updated = response code 200 (OK)
			-action has been queued = response code 202 (Accepted) or 
			-resource updated but the response does not include an entity = response code 204 (No Content)

	HTTP HEAD
		purpose:
			-verifies if a resource is available (is almost identical to GET, except without the response body)
		properties:
			-safe 
			-idempotent	
			-Request doesn't have body
			-Successful response has nobody
			-Cacheable
		responses statuses:
			-resouce available = return HTTP response code 200 (OK)
			
	HTTP CONNECT
		purpose:
			-starts two-way communications with the requested resource
		properties:
			-not safe 
			-not idempotent	
			-Request doesn't have body
			-Successful response has nobody
			-not cacheable
		responses statuses:
			-resouce available = return HTTP response code 200 (OK)

	HTTP OPTIONS
		purpose:
			-is used to describe the communication options for the target resource
		properties:
			-safe 
			-idempotent	
			-Request doesn't have body
			-Successful response has body
			-not cacheable

	HTTP TRACE
		purpose:
			-performs a message loop-back test along the path to the target resource, providing a useful debugging mechanism.
		properties:
			-not safe 
			-idempotent	
			-Request doesn't have body
			-Successful response doesn't have body
			-not cacheable



1xx Informational
	100	Continue :
		-  This interim response is used to inform the client that the initial part of the request has been received and has not yet been rejected by the server

2xx Success
	200 OK :
		The request has succeeded in following cases :
			- GET an entity corresponding to the requested resource is sent in the response;
			- HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body;
			- POST an entity describing or containing the result of the action;
			- TRACE an entity containing the request message as received by the end server.

	 201 Created:
	 	The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field.

	 202 Accepted:
	 	The request has been accepted for processing, but the processing has not been completed. 

	 204 No Content:
	 	The server has fulfilled the request but does not need to return an entity-body.


3xx Redirection:
	304 Not Modified :
		- If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code 
		- The 304 response MUST NOT contain a message-body

	307 Temporary Redirect:
		The requested resource resides temporarily under a different URI. Since the redirection MAY be altered on occasion, the client SHOULD continue to use the Request-URI for future requests

4xx Client Error:
	400 Bad Request:
		The request could not be understood by the server due to malformed syntax.

	401 Unauthorized:
		The request requires user authentication

	404 Not Found:
		The server has not found anything matching the Request-URI.

	405 Method Not Allowed:
		The method specified in the Request-Line is not allowed for the resource identified by the Request-URI. 

	406 Not Acceptable:
		The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request.

	408 Request Timeout:
		The client did not produce a request within the time that the server was prepared to wait.

	414 Request-URI Too Long:
		The server is refusing to service the request because the Request-URI is longer than the server is willing to interpret.

5xx Server Error:
	500 Internal Server Error:
		The server encountered an unexpected condition which prevented it from fulfilling the request.

	501 Not Implemented:
		The server does not support the functionality required to fulfill the request. This is the appropriate response when the server does not recognize the request method and is not capable of supporting it for any resource.

	503 Service Unavailable:
		The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.
