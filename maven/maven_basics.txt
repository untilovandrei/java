A Project Object Model ( POM ) is the fundamental unit of work in Maven
	- POM contains information about the project and configuration details used by Maven to build the project
	- Super POM is Maven's default POM
	- All POMs extend the Super POM unless explicitly set
	- If default value of packaging type is not specified in the POM, then the  "jar" would be used



The minimum requirement for a POM are the following:
	- project root 
	- modelVersion (should be set to 4.0.0)
	- groupId (the id of the project's group)
	- artifactId (the id of the artifact (project))
	- version (the version of the artifact under the specified group)

!!!! A POM requires that its groupId, artifactId, and version be configured




Project Inheritance
	

	Parent (my-app)

		<project>
		  <modelVersion>4.0.0</modelVersion>
		  <groupId>com.mycompany.app</groupId>
		  <artifactId>my-app</artifactId>
		  <version>1</version>
		</project>



	Child (my-module)

		<project>
		  <modelVersion>4.0.0</modelVersion>
		  <groupId>com.mycompany.app</groupId>
		  <artifactId>my-module</artifactId>
		  <version>1</version>
		</project>

--------------------------------------------------------------------------------------------------
------------------------------------------------------------
-----------------------------------
			Project Inheritance
-----------------------------------
------------------------------------------------------------
--------------------------------------------------------------------------------------------------

----------------------------------
	Scenario 1 (parent pom.xml is one directory higher than that of the module's pom.xml)
----------------------------------


	Project Structure:
	|-- my-module
    |   `-- pom.xml
	`-- pom.xml


	
		<project>
		  <parent>
		    <groupId>com.mycompany.app</groupId>
		    <artifactId>my-app</artifactId>
		    <version>1</version>
		  </parent>

		  <modelVersion>4.0.0</modelVersion>
		  <groupId>com.mycompany.app</groupId>
		  <artifactId>my-module</artifactId>
		  <version>1</version>
		</project>

With this setup, our module can now inherit some of the properties of our parent POM
	- if we want the groupId and / or the version of your modules to be the same as their parents, you can remove 
	  the groupId and / or the version identity of your module in its POM.

		<project>
		  <parent>
		    <groupId>com.mycompany.app</groupId>
		    <artifactId>my-app</artifactId>
		    <version>1</version>
		  </parent>

		  <modelVersion>4.0.0</modelVersion>
		  <artifactId>my-module</artifactId>
		</project>

!!! This allows the module to inherit the groupId and / or the version of its parent POM.


----------------------------------
	Scenario 2 (parent .pom and molude .pom ar located in different folders but under the same root folder)
----------------------------------
Solution : specify the relative path to root directory. ( <relativePath> ../parent/pom.xml </relativePath> )

	<project>
	  <parent>
	    <groupId>com.mycompany.app</groupId>
	    <artifactId>my-app</artifactId>
	    <version>1</version>
	    <relativePath>../parent/pom.xml</relativePath>
	  </parent>

	  <modelVersion>4.0.0</modelVersion>
	  <artifactId>my-module</artifactId>
	</project>



--------------------------------------------------------------------------------------------------
------------------------------------------------------------
-----------------------------------
			Project Aggregation
-----------------------------------
------------------------------------------------------------
--------------------------------------------------------------------------------------------------

Project Inheritance : Children modules POM contain data about parent module
		vs
Project Aggregation : parent POM contains data about children modules


To do Project Aggregation, you must do the following:
	- Change the parent POMs packaging to the value "pom".
	- Specify in the parent POM the directories of its modules (children POMs).


1. Aggregate my-module into my-app ( Project Inheritance - Scenario 1 (Note the directories hierarchy) ), we would only have to modify my-app
		
		<project>
		  <modelVersion>4.0.0</modelVersion>
		  <groupId>com.mycompany.app</groupId>
		  <artifactId>my-app</artifactId>
		  <version>1</version>
		  <packaging>pom</packaging>
		 
		  <modules>			--value of <module> is the relative path from the com.mycompany.app:my-app
		    <module>my-module</module>
		  </modules>
		</project>




2 Aggregate my-module into my-app ( Project Inheritance - Scenario 2 (Note the directories hierarchy) ), we would only have to modify my-app

		<project>
		  <modelVersion>4.0.0</modelVersion>
		  <groupId>com.mycompany.app</groupId>
		  <artifactId>my-app</artifactId>
		  <version>1</version>
		  <packaging>pom</packaging>		-- used on agregation
		 
		  <modules>
		    <module>../my-module</module>	-- "../" portion of the relative path means "go back one directory."
		  </modules>
		</project>



--------------------------------------------------------------------------------------------------
------------------------------------------------------------
-----------------------------------
			Project Inheritance		 vs 	Project Aggregation
-----------------------------------
------------------------------------------------------------
--------------------------------------------------------------------------------------------------

1 . If you have several Maven projects, and they all have similar configurations, 
	you can refactor your projects by pulling out those similar configurations and making a parent project.	=> Project Inheritance







--------------------------------------------------------------------------------------------------
------------------------------------------------------------
-----------------------------------
			Project Interpolation and Variables
-----------------------------------
------------------------------------------------------------
--------------------------------------------------------------------------------------------------

to access the project.version variable, you would reference it like so:
	<version> ${project.version} </version>

------------------------------------------------------------
Project Model Variables
------------------------------------------------------------
	- Any field of the model that is a single value element can be referenced as a variable
		Ex: ${project.groupId}
			${project.version}
			${project.build.sourceDirectory}

------------------------------------------------------------
Special Variables
------------------------------------------------------------
- project.basedir			The directory that the current project resides in.
- project.baseUri			The directory that the current project resides in, represented as an URI. Since Maven 2.1.0
- maven.build.timestamp		The timestamp that denotes the start of the build (UTC). Since Maven 2.1.0-M1


------------------------------------------------------------
Properties
------------------------------------------------------------
	<project>
	  ...
	  <properties>
	    <mavenVersion>3.0</mavenVersion>		-- variable
	  </properties>

	  <dependencies>
	    <dependency>
	      <groupId>org.apache.maven</groupId>
	      <artifactId>maven-artifact</artifactId>
	      <version>${mavenVersion}</version>
	    </dependency>
	    <dependency>
	      <groupId>org.apache.maven</groupId>
	      <artifactId>maven-core</artifactId>
	      <version>${mavenVersion}</version>
	    </dependency>
	  </dependencies>
	  ...
	</project>