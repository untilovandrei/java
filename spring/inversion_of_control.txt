Inversion of Control - 
		principle in software engineering by which the control of objects or portions of a program is transferred to a container or framework. 
		It's most often used in the context of object-oriented programming.
The advantages of this architecture are:
	-	decoupling the execution of a task from its implementation
	-	making it easier to switch between different implementations
	- 	greater modularity of a program
	-	greater ease in testing a program by isolating a component or mocking its dependencies and allowing components to communicate through contracts.

In the Spring framework, the IoC container is represented by the interface ApplicationContext interface.
ApplicationContext intf has several implementations:
		Standalone Applications
	 		- ClassPathXmlApplicationContext
	 		- FileSystemXmlApplicationContext
	 	Web Applications
	  		- WebApplicationContext.

The Spring container has several objectives on beans:
		- instantiation; 
		- configuration;
		- assembling 
		- managing their lifecycle.


----------------------------------------------------------------------------------------------------------


Dependency injection -
		 pattern through which to implement IoC, where the control being inverted is the setting of object's dependencies.

Bean's scopes :
	1. "singleton" (default) - Spring first checks if a cached instance of the bean already exists and only creates a new one if it doesn't
	2. "prototype" - the container returns a new bean instance for each method call.

Dependency Injection in Spring can be done through: 
		- constructors;
		- setters;
		- fields.







----------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-----------------------------------------
	DEPENDENCY INJECTION TYPES				
-----------------------------------------
-------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------

												-- Constructor-Based Dependency Injection

In the case of constructor-based dependency injection, the container will invoke a constructor with arguments each representing a dependency we want to set.

"@Configuration" annotation indicates that the class is a source of bean definitions. 
		Also, we can add it to multiple configuration classes !!!

"@Bean" annotation is used on a method to define a bean. 
		If we don't specify a custom name, the bean name will default to the method name.

											CLASS CONFIG

@Configuration
public class AppConfig {

    @Bean
    public Item item1() {
        return new ItemImpl1();
    }

	@Bean
    public Store store() {
        return new Store(item1());   	//Constructor-Based Dependency Injection
    }

}

											XML CONFIG
	<bean id="item1" class="org.baeldung.store.ItemImpl1" /> 
	<bean id="store" class="org.baeldung.store.Store"> 
	    <constructor-arg type="ItemImpl1" index="0" name="item" ref="item1" /> 
	</bean>


----------------------------------------------------------------------------------------------------------


												-- Setter-Based Dependency Injection

The container will call setter methods of our class, after invoking a no-argument constructor or no-argument static factory method to instantiate the bean.

											CLASS CONFIG
	@Bean
	public Store store() {
	    Store store = new Store();
	    store.setItem(item1());			//Setter-Based Dependency Injection
	    return store;
	}

											XML CONFIG
	<bean id="store" class="org.baeldung.store.Store">
	    <property name="item" ref="item1" />
	</bean>


----------------------------------------------------------------------------------------------------------

												-- Field-Based Dependency Injection

Innjection of dependencies by marking them with an @Autowired annotation (Autowiring by bean type):

	public class Store {
	    @Autowired
	    private Item item; 				//Field-Based Dependency Injection
	}

If there's more than one bean of the same type, we can use the @Qualifier annotation to reference a bean by name (Qualifier of "Item1" class is "item1")
public class Store {
     
    @Autowired
    @Qualifier("item1")
    private Item item;
}