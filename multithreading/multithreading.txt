	Threads lifecycle:
-New
	#The thread is in new state if you create an instance of Thread class 
		but before the invocation of start() method.
-Runnable
	#The thread is in runnable state after invocation of start() method, but 
		the thread scheduler has not selected it to be the running thread.
-Running
	#The thread is in running state if the thread scheduler has selected it.(run() method started)
-Non-Runnable (Blocked)
	#This is the state when the thread is still alive, but is currently not eligible to run.
-Terminated
	#A thread is in terminated or dead state when its run() method exits.


Threads can be created by using two mechanisms :
	1. Extending the Thread class( override "run()" method of Thread class)
		- class only goal is to run as Thread
	2. Implementing the Runnable Interface (implement run() method then "Thread t = new Thread(runnableImpl)" => t.start())
		- used when class provides more functionality rather than just running as Thread

------------------------------
-----------------
Thread scheduler
-----------------
------------------------------
"Thread scheduler" - is the part of the JVM that decides which thread should run.
		it uses "preemptive" or "time slicing" scheduling to schedule the threads.

"preemptive scheduling" - 	the highest priority task executes until it enters the waiting 
							or dead states or a higher priority task comes into existence. 
"time slicing"	-	a task executes for a predefined slice of time and then reenters the pool of ready tasks.

------------------------------
-----------------
Start thread twice
-----------------
------------------------------
 Thread will run once but for second time, it will throw exception.
 running
       Exception in thread "main" java.lang.IllegalThreadStateException


------------------------------
-----------------
Join threads
-----------------
------------------------------
The join() method waits for a thread to die. In other words, it causes the currently running threads to stop executing until the thread it joins with completes its task.
public static void main(String args[]){  
	TestJoinMethod1 t1=new TestJoinMethod1();  
	TestJoinMethod1 t2=new TestJoinMethod1();  
	TestJoinMethod1 t3=new TestJoinMethod1();  
		t1.start();  
			try{  
  				t1.join();  
 			}catch(Exception e){System.out.println(e);}  
 		t2.start();  
 		t3.start();  
}  
!!! t1.join() => when t1 completes its task then t2 and t3 starts executing.
!!! t1.join(1500) => t1 is executed for 1500ms then then t2 and t3 starts executing.


------------------------------
-----------------
Thread priority
-----------------
------------------------------
TestMultiPriority1 m1=new TestMultiPriority1();  
 m1.setPriority(Thread.MIN_PRIORITY);  




------------------------------
-----------------
 Java Thread Sleep 
-----------------
------------------------------
 -	It always pause the current thread execution.
 -	The actual time thread sleeps before waking up and start execution depends on system timers and schedulers. 
	For a quiet system, the actual time for sleep is near to the specified sleep time but for a busy system it will be little bit more.
 -	Thread sleep doesn’t lose any monitors or locks current thread has acquired.
 -	Any other thread can interrupt the current thread in sleep, in that case InterruptedException is thrown.

"Thread.sleep(2000);"



------------------------------
-----------------
wait,notify and notifyAll
-----------------
------------------------------
wait 		- pause the execution of thread and will wait the notify invocation.
notify 		- resumes the execution of thread. If more then one thread are waiting, 
				then "Thread scheduler" decides which thread to resume. The rest of them will be waiting.
notifyAll 	- resumes the execution of all waiting threads.



------------------------------
-----------------
Synchronization
-----------------
------------------------------

- "synchronized" keyword can be used in two ways: 
		-	make a complete method synchronized 
		- 	create synchronized block.
- if a method is synchronized 	=> it locks the Object
- if method is static 			=> it locks the Class
- !!! it’s always best practice to use "synchronized block" to lock the only sections of method that needs synchronization.
- while creating a synchronized block, we need to provide the resource on which lock will be acquired: 
		-  Class.class 
		-  any Object field of the class.
		Ex: "synchronized(this)" => will lock the Object before entering into the synchronized block.
- use the "lowest level of locking" 
- if there are multiple synchronized block in a class and one of them is locking the Object, 
	then other synchronized blocks will also be not available for execution by other threads
- Java Synchronization works only in the same JVM, so if you need to lock some resource in multiple JVM environment, 
	it will not work and you might have to look after some global locking mechanism
- !!! synchronized keyword cannot be used for:
		-  constructors;
		-  variables.
- avoid usage of :
		- public "Object obj" for "synchronized(obj)" , because ref of "obj" can be changed by untrusted code.
		- public setter methods for "Object obj"
		- synchronized(Class.class) , because it will block the whole class.
- don't use any object that is maintained in a constant pool as monitor object (String pool)

Conclusion: the optimal variant for synchronized(lock) is "private Object lock = new Object();"



------------------------------
-----------------
Daemon Thread
-----------------
------------------------------
- When a thread is marked as daemon thread => JVM doesn’t wait it to finish to terminate the program. 
- Thread.setDaemon(true) is used to create a daemon thread in java. 
	This method should be invoked before the thread is started otherwise it will throw IllegalThreadStateException
- check if a thread is daemon thread or not by calling isDaemon().